# -*- coding: utf-8 -*-
"""Codd-3NF-ex.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/135AuvG2q1oJs_0lARtpYYmDZKU2FGHJi

## Context

This notebook shows how to use the Python package
[`functional_dependencies`](https://gitlab.com/oer/cs/functional-dependencies)
to normalize relation schemata.  You may want to read the
[documentation for that package](https://oer.gitlab.io/cs/functional-dependencies/functional_dependencies.html),
which summarizes basic notions of the relational model of data.

## A sample schema

The normalization example used here goes back to Codd in his
[1971 paper](https://www.bibsonomy.org/bibtex/24b7b528f0502ff638c837f39a3ed3732),
where he defined 2NF and 3NF.

First, import the module and define three FDs about employees, who are
assigned job codes and work in departments with managers on contracts.
"""

import functional_dependencies as fd

fde1 = fd.FD("EmpSerialNo", {"JobCode", "DeptNo", "Contract"})
fdd1 = fd.FD("DeptNo", {"ManagerNo", "Contract"})
fdd2 = fd.FD("ManagerNo", {"DeptNo", "Contract"})

"""Collect the FDs in an `FDSet` and create a relation schema `employee`
  for the FDs.  A relation schema in this module is represented as pair
  that consists of a `set` of attributes and an `FDSet`.  Note that we
  can ask an `FDSet` for the attributes occurring in the FDs.


"""

fds = fd.FDSet({fde1, fdd1, fdd2})
employee = fd.RelSchema(fds.attributes(), fds)

"""Before proceeding, why does that schema violate 3NF?  Does it satisfy
  2NF?  What keys exist?

## Normalization

First, compute some key in response to a previous question.
  Convince yourself that no other keys exist.
"""

print(", ".join(attr for attr in employee.key()))

"""As that is the only key, the schema trivially satisfies 2NF.

Note that (a) `Contract` is determined by `EmpSerialNo`, `DeptNo`,
and `ManagerNo` and (b) neither `DeptNo` nor `ManagerNo` determine
`EmpSerialNo`.  Thus, `Contract` is *transitively* dependent on
`EmpSerialNo`, violating 3NF.  (Codd also pointed out other
transitive FDsâ€¦)


"""

print(not fds.isimplied({"DeptNo"}, {"EmpSerialNo"})
      and not fds.isimplied({"ManagerNo"}, {"EmpSerialNo"}))

"""Normalize the schema.  Here, we obtain two relation schemata in 3NF:


"""

normalized = employee.synthesize(minimize=True)
print("\n".join(str(schema) for schema in normalized))

"""Note that the schema containing `Contract` has two keys.  Which of
  them is used as foreign key in the other schema is unspecified by
  3NF, so two outcomes would be correct here.  (The present result of
  `synthesize()` is shaped by `fde1` above, which contains `DeptNo`
  instead of `ManagerNo`.)


"""